:PROPERTIES:
:ID:       3EDD71C0-7F43-47EB-A551-7E08BBB7A9AC
:END:
#+title: Elixir
#+category: Elixir

* Strings
** Concatenation

   #+BEGIN_SRC elixir
   "hello " <> "world"
   #+END_SRC

** Interpolation

   #+BEGIN_SRC elixir
"hello #{world}"
   #+END_SRC

* IO

  #+BEGIN_SRC elixir
IO.puts("hello world")
  #+END_SRC

* Types

  #+BEGIN_SRC elixir
[1, 2, 3] # list
{1, 2, 3} # tuple
  #+END_SRC

* Functions

* Logic

  #+BEGIN_SRC elixir
true and true
true or true
  #+END_SRC

* Data Structures
** Lists

   #+BEGIN_SRC elixir
[1, 2, 3] ++ [4, 5, 6] # concatenation
hd(list) # head of the list
tl(list) # the rest of the list
   #+END_SRC

Lists & tuples can hold multiple values with different types

Lists are stored as singly-linked lists

** Tuples

   #+BEGIN_SRC elixir
elem(tuple, 1) # first element
   #+END_SRC

** Semantics

   - the function size is used if the value is stored in the data structure (linear time)
     - Or named length if it needs to be computed

* Atoms

  - Constants whose value is it's name

    #+BEGIN_SRC elixir
:apple
    #+END_SRC

* Pattern Matching

  The equals sign operator is the match operator

  x = 1 returns true and then so will 1 = x

** Destructuring

  #+BEGIN_SRC elixir
{a, b, c} = {:hello, :world, 42}

# assigns result if :ok
{:ok, result} = func

[head | tail] = [1, 2, 3]

# use this to prepend
list = [0 | list]
  #+END_SRC

** Pin Operator

   #+BEGIN_SRC elixir
x = 1
^x = 2 # no match
   #+END_SRC

** Case

   #+BEGIN_SRC elixir
x = 4
case {1, 2, 3} do
  {^x, 2, 3} ->
    "no match because x is pinned"
  {1, x, 3} ->
    "x gets reassigned to 2"

   _ when x > 0 ->
    "extra condition"
end
   #+END_SRC


Errors in guards don't get thrown. They just don't match

* Logic
** Cond

   #+BEGIN_SRC elixir
cond do
  2 + 2 == 5 ->
    "This will not be true"
  2 * 2 == 3 ->
    "Nor this"
  1 + 1 == 2 ->
    "But this will"
  true ->
    "default"
end
   #+END_SRC
* Functions
** Anonymous Functions

   #+BEGIN_SRC elixir
add = fn a, b -> a + b end
add.(1, 2)
   #+END_SRC

** Capture Operator

   =&= captures functions. =&1= references the first parameter

   #+BEGIN_SRC elixir
fun = &(&1 + 2)
   #+END_SRC
