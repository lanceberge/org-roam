:PROPERTIES:
:ID:       3EDD71C0-7F43-47EB-A551-7E08BBB7A9AC
:END:
#+title: Elixir
#+category: Elixir

* Strings
** Concatenation

   #+BEGIN_SRC elixir
"hello " <> "world"
   #+END_SRC

** Interpolation

   #+BEGIN_SRC elixir
"hello #{world}"
"5 + 10 = #{5 + 10}"
   #+END_SRC


** Sigils

   #+BEGIN_SRC elixir
~s("Includes quotes")
~S("raw backslash char: \") # doesn't escape
   #+END_SRC

** Charlists

   Lists of ASCII codepoints (range 0-127 I think)

   #+BEGIN_SRC elixir
[65, 66, 67]
# ~c"ABC"
   #+END_SRC

* IO

  #+BEGIN_SRC elixir
IO.puts("hello world")
  #+END_SRC

* Types

  #+BEGIN_SRC elixir
[1, 2, 3] # list
{1, 2, 3} # tuple
  #+END_SRC

* Functions

  oneline functions

  #+BEGIN_SRC elixir
def area(a, b) do: a * b
  #+END_SRC

** Default Values

   #+BEGIN_SRC elixir
def area(a, b \\ 0) do: a * b
   #+END_SRC

* Logic

  #+BEGIN_SRC elixir
true and true
true or true
  #+END_SRC

* Data Structures
** Lists

   #+BEGIN_SRC elixir
[1, 2, 3] ++ [4, 5, 6] # concatenation (O(len(first list)) bc linked lists)
hd(list) # head of the list
tl(list) # the rest of the list

5 in list # if an elem is in a list

List.replace_at(list, 0, 1)

List.insert_at(list, 0, 1)
   #+END_SRC

Lists & tuples can hold multiple values with different types

Lists are stored as singly-linked lists

Generally add only to the front of a list

*** Modifying Lists

    - When you modify a list, the new version contains a shallow copy of the first n - 1 entries
      with the tail after that shared

*** Keyword Lists

    Linked list of key value pairs. Useful for smaller maps

    #+BEGIN_SRC elixir
[monday: 1, tuesday: 2] # equals a list of Tuples with atom keys
    #+END_SRC

    These are often used for named arguments, so often that you can omit the square brackets

    #+BEGIN_SRC elixir
IO.inspect([100, 200, 300], width: 3, limit: 1)
    #+END_SRC

** Tuples

   #+BEGIN_SRC elixir
elem(tup, 1) # first element

tup = put_elem(tup, 1, 26) # update index 1 to 26
   #+END_SRC

*** Modifying Tuples

    When you modify a tuple, it returns a shallow copy of the old tuple with the modification

** Semantics

   - the function size is used if the value is stored in the data structure (linear time)
     - Or named length if it needs to be computed

** Maps

   #+BEGIN_SRC elixir
map = %{:a => 1, :b => 2}

# This is equivalent to:
map = %{a => 1, b => 2}

map[:a]

# or
Map.get(map, :a, default)
#or
map.a # works for atom keys

Map.fetch(:a)
# returns {:ok, 1} or :error

Map.put(map, :c, 3)

# Updating a field
map = %{map | c: 10}
   #+END_SRC

** MapSets

   Use as your default set implementation

   #+BEGIN_SRC elixir
MapSet.new([:monday, :tuesday, :wednesday])
MapSet.member?(days, :monday)
# true
   #+END_SRC

** Datetimes

   #+BEGIN_SRC elixir
date = ~D[2023-01-31]
date.year
   #+END_SRC

* Pattern Matching

  The equals sign operator is the match operator

  x = 1 returns true and then so will 1 = x

** Destructuring

  #+BEGIN_SRC elixir
{a, b, c} = {:hello, :world, 42}

# assigns result if :ok
{:ok, result} = func

[head | tail] = [1, 2, 3]

# use this to prepend
list = [0 | list]

# matching maps
%{name: name, age: age} = bob

# matching binaries
<<b1, b2, b3>> = "ABC"

<<b1, rest :: binary>> = binary

# chaining matches
a = (b = 1 + 3) # parens are optional
# a = 4
  #+END_SRC

** Pin Operator

   Does a match without assignment

   #+BEGIN_SRC elixir
x = 1
^x = 2 # no match
   #+END_SRC

** Case

   #+BEGIN_SRC elixir
x = 4
case {1, 2, 3} do
  {^x, 2, 3} ->
    "no match because x is pinned"
  {1, x, 3} ->
    "x gets reassigned to 2"

   _ when x > 0 ->
    "default"
end
   #+END_SRC


Errors in guards don't get thrown. They just don't match

* Logic
** Cond

   Use cond to handle branching conditionals
   #+BEGIN_SRC elixir
cond do
  2 + 2 == 5 ->
    "won't match"
  1 + 1 == 2 ->
    "but this will"
  true ->
    "default"
end
   #+END_SRC
** Guards

   #+BEGIN_SRC elixir
def sign(x) when is_number(x) and x < 0 do
  :negative
end

def sign(x) when is_number(x) and x > 0 do
  :positive
end

def test(0) do
  :zero
end
   #+END_SRC
** Guards with Lambdas

   #+BEGIN_SRC elixir
test_num = fn
  x when is_number(x) and x < 0 -> :negative
  x when is_number(x) and x > 0 -> :positive
  0 -> :zero
end
   #+END_SRC

** unless keyword

   if not

   #+BEGIN_SRC elixir
unless result == :error do: # ...
   #+END_SRC

** with

   with is useful for having chaining expressions returning {:ok, result} or {:error, reason}

   Once it encounters an {:error, reason}, it'll return {:error, reason}

   #+BEGIN_SRC elixir
with {:ok, login} <- get_login(),
     {:ok, email} <- get_email(),
     {:ok, password} <- get_password(),
{:ok, %{login: login, email: email, password: password}}
   #+END_SRC

* Functions
** Anonymous Functions

   #+BEGIN_SRC elixir
add = fn a, b -> a + b end
add.(1, 2)
   #+END_SRC

** Capture Operator

   =&= captures functions. =&1= references the first parameter

   #+BEGIN_SRC elixir
fun = &(&1 + 2)

fun = &(&1 + &2) # 2-arity function

# use for function references
&add/2

# note that this is still creating an anonymous function, thus this is valid
Enum.each(1..5, &fun(&1 + 2))
   #+END_SRC
* Naming Conventions

  Postfix in =?= if it returns a bool

* Recursion, reductions

  You can match the parameters of a function. But this will iterate over each instance that matches the arity.

  e.g. if you provide three matches for area/1 it won't iterate over them for a call to area() with 2 parameters

  #+BEGIN_SRC elixir
defmodule Math do
  def sum_list([head | tail], accumulator) do
    sum_list(tail, head + accumulator)
  end

  # pattern match the base case
  def sum_list([], accumulator) do
    accumulator
  end
end

IO.puts(Math.sum_list([1, 2, 3], 0))

Enum.map([1, 2, 3], &(&1 * 2))
Enum.reduce([1, 2, 3], &+/2)
  #+END_SRC

 Elixir compiles =head | tail= recursions to something resembling gotos (e.g. in a traditional for loop)
 This is true for all tail recursive calls - where the last thing in the function is the recursive call


* Streams vs. Enums

  - streams are lazy

    #+BEGIN_SRC elixir
Enum.to_list(stream)

Enum.take(stream, 10) # get the first 10 results

Enum.each(stream, func)
    #+END_SRC

* Enums

  #+BEGIN_SRC elixir
Enum.each(list, func)

Enum.map(list, func)
  #+END_SRC

* Modules

  #+BEGIN_SRC elixir
defmodule Circle do
  @pi 3.14 # compile time constant
end
  #+END_SRC

* Type Hints

  - Called type specs

    #+BEGIN_SRC elixir
@spec area(number) :: number
def area(r) do: r * r * @pi
#+END_SRC

* Binaries, Bitstrings

  - Binary - a collection of bytes

    #+BEGIN_SRC elixir
<<255>> # 255
<<256>> # overflows to 0

<<255::16>> # specify to use 16 bits for 255
# <<0, 255>>

<<257::16>>
# <<1, 1>> because this represents 0x01 0x01
    #+END_SRC

  - The result of a binary is comma-separated sequences of 8 bits
  - If the result isn't in a multiple of 8 bits, it's a bitstring

* Comprehensions

  Iterates over the input list and returns the list w/ the function applied

  #+BEGIN_SRC elixir
for x <- [1, 2, 3] do
    x * x
end

# can use ranges
for x <- 1..3 do
end

multiplication_table =
    for x <- 1..9,
      y <- 1..9,
      x <= y, # filter
  into: %{} do
        {{x, y}, x * y}
    end

  #+END_SRC

* Structs

  #+BEGIN_SRC elixir
%Fraction{fraction | b : 4} # replace a field
  #+END_SRC

* Protocols

  - Analogous to interfaces

    #+BEGIN_SRC elixir
defprotocol String.Chars do
  def to_string(term)
end

# for can be Tuple, Atom, List, Map, BitString, Integer, Float, Function
defimpl String.Chars, for: Integer do
  def to_string(term) do
    res
  end
end
    #+END_SRC

  Base protocols to implement include =Enumerable, Collectable=

* BEAM

  - BEAM is built to abstract away processes inside of the main Erlang process. It abstracts away server-server communication
    as if it was process-process communication
    - e.g. instead of using a message queue and in-memory cache, everything can just be Elixir
    - the BEAM still doesn't replace the horizontally scalability you get from tools like K8s

** Concurrency

   - Processes are managed by schedulers. By default, the BEAM allocates one scheduler for each available CPU thread

* Concurrency

  #+BEGIN_SRC elixir
pid = spawn(fn -> ...)
# create a process, this returns the PID

send(pid, variable)

# on the receiver
receive do
  pattern_1 -> func()
  pattern_2 -> func2()
after
  5000 -> IO.puts("no message found after 5000 secs")
end

pid = self() # get the current process's PID

get_result =
fn ->
  receive do
    {:query_result, result} -> result
  end
end

Enum.each(1..5, fn _ -> get_result.() end)
  #+END_SRC

** Server Processes

   - Long-running server processes

     #+BEGIN_SRC elixir
defmodule DatabaseServer do
  def start do
    spawn(&loop/0)
  end

  defp loop do
    receive do
      ...
    end

    loop() # tail recurse to loop
  end
end
     #+END_SRC

** Stateful Processes

   #+BEGIN_SRC elixir
def start do
  spawn(fn ->
    initial_state = ...
    loop(initial_state)
  end)
end

defp loop(state) do
  ...
  loop(state)
end
   #+END_SRC

** Managing Several Processes

   Register names with:

   #+BEGIN_SRC elixir
Process.register(self(), :some_name)
   #+END_SRC

** Misc

   Make sure to match all in a =receive= block, otherwise they sit in the processes input queue

* Ranges

#+BEGIN_SRC elixir
range = 1..2
2 in range # true

Enum.each(1..2, func)
#+END_SRC
* Misc

  - Integer division: =div(5, 2)=
  - Remainder: =rem(3, 2)=
* Phoenix
** LiveView
*** Url Params, Sessions

    The session info comes from a signed cookie

   #+BEGIN_SRC elixir
def mount(%{"house" => house}, _session, socket) do
  Thermostat.get_house_temp(house)
end

# in the router:
live("/thermostat/:house")
   #+END_SRC
***  Templates

    #+BEGIN_SRC html
<section :for={post <- @posts} :key={post.id}>
  <h1>{expand_title(post.title)}</h1>
</section>
    #+END_SRC

Reactive variables:

#+BEGIN_SRC elixir
assign(assigns, sum: assigns.x + assigns.y)
#+END_SRC
