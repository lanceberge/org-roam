:PROPERTIES:
:ID:       90B3299A-2B7D-4F04-8948-27EDB31CB05B
:END:
#+title: Laravel
#+filetags: Programming

* Routing
** Resources

  Create index and store routes

#+BEGIN_SRC php
Route::resource('chirps', ChirpController::class)
    ->only(['index', 'store', 'update', 'destroy'])
    ->middleware(['auth', 'verified']);
#+END_SRC

These create routes for the components: ex. 'chirps.destroy'
** Update example


   The dependency injection parses the chirp from the resource route =/chirps/{chirp}= and injects it

   You don't have to call the method. Laravel's routing does that automatically when the parameters match

   #+BEGIN_SRC php
class ChirpController extends Controller
{
  public function update(Request $request, Chirp $chirp): RedirectResponse
    {
    }
}

// Expects chirp to be an id
Route::patch('/chirps/{chirp}', [ChirpController::class, 'update'])->name('chirp.update');

// Or you can resolve by name instead of id: dependency injection will resolve the tag by name instead of id
Route::get('/tags/{tag:name}');
   #+END_SRC

* Middleware

  - Examples: Rate-[[id:C93D6E32-27C7-472E-A6F1-3682401E663C][Rate Limiting]], logging, caching, CSRF, email-verified users
  - Define middleware groups in app/Http/Kernel.php

Wrap routes in a middleware group:

#+BEGIN_SRC php
Route::middleware('guest')->group(function () {
  Route::get('register', [RegisteredUserController::class, 'create'])->name('register');

  Route::post('register', [RegisteredUserController::class, 'store']);
});
#+END_SRC

* Controllers

  Naming conventions

 | index  | GET  | get the view at the route                          |
 | create | GET  | display the form to create a new _                 |
 | store  | POST | save new resources to the db                       |
 | show   | GET  | show something (but not a full page, that's index) |

 POST requests automatically include CSRF protection. So any route that modifies server
 state should be a POST request

* [[id:8C8AADB8-324A-4DF4-9A15-E7AED2E08711][Database]] Interactions

  Use TablePlus for a database GUI

#+BEGIN_SRC php
# php artisan tinker
App\Models\Chirp::all();
#+END_SRC

** Relationships, Models

   Establishing relationships lets you do things like:

#+BEGIN_SRC php
$request->user()->chirps()->create($validated);

// app/Models/User.php
class User extends Authenticatable
{
    // Enable mass assignment for this attribute
    protected $fillable = [
        'message',
    ];

    public function chirps()
    {
        return $this->hasMany(Chirp::class);
    }
}

class Chirp extends Model
{
    // Access as a property, not a method. Ex. $chirp->user
    public function user()
    {
        return $this->belongsTo(User::class);
    }
}
#+END_SRC

- hasOne

** Migrations

   #+BEGIN_SRC php
<?php

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('chirps', function (Blueprint $table) {
            $table->id();
            // constrained means that user_id has to exist in it's table
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->string('message');
            $table->timestamps();
        });
    }
};
   #+END_SRC

** Factories

   Used to seed your DB

   #+BEGIN_SRC bash
php artisan tinker
> App\Models\Job::factory()->create();

# or
> App\Model\Job::factrory()->unverified()->create();
   #+END_SRC

** Eloquent

 #+BEGIN_SRC php
// lazy load - can cause the N+1 problem
$jobs = Jobs::all();
$jobs[0]->salary;

Job::create(['title' => 'Director', 'salary' => '$1,000,000']);

Job::find(7)->delete(); // find id 7 then delete it

Job::first();

// ex. if job belongsTo employer
// latest is essentially an ORDER BY
Job::with('employer')->latest()->simplePaginate(3);

$tag = Tag::firstOrCreate(['name' => $name]);
$this->tags()->attach($tag);

Job::where('title', 'LIKE', '%'.request('q').'%');

// Eager load to avoid n+1 problem
Job:with(['employer', 'tags']);

// You can keep everything on it's own line
Job::query()
    ->with()
    ->where();
 #+END_SRC

* Artisan

  #+BEGIN_SRC sh
php artisan make:model -mrc Chirp

php artisan migrate:fresh # reset the database
  #+END_SRC

* Policies

  - No policy class => everything is allowed
  - Policy class => Nothing is allowed except what's specified in the policies
  - Lets you define rules for controller commands

    #+BEGIN_SRC php
class PostPolicy
{
    public function update(User $user, Post $post): bool
    {
        return $user->id === $post->user_id;
    }
}

// in the route
Route::get('users/create', function() {
    Return Inertia::render('Users/Create', [
        'can' => Auth::user()->can('create', User::class);
    ]);
})->middleware('can:create,App\Models\User');
    #+END_SRC

* Events

  - Add listeners to things that happen

#+BEGIN_SRC sh
php artisan make:listener SendChirpCreatedNotifications --event=ChirpCreated
#+END_SRC

https://bootcamp.laravel.com/inertia/notifications-and-events

* Useful Functions

  #+BEGIN_SRC php
$job = Arr::first($jobs, fn($job) => $job['id'] == $id);

logger("job: " . $job)
  #+END_SRC

* Request Validation

  #+BEGIN_SRC php
$userAttributes = $request->validate([
    'name' => ['required'],
    'email' => ['required', 'email', 'unique:users,email'], // verify that it's unique on the users table
    'password' => ['required', Password::min(6)],
    'schedule' => ['required', Rule::in(['Part Time', 'Full Time'])],
]);

$user = User::create($userAttributes);

Auth::login($user);
  #+END_SRC

* Deployment

  1. Create an AWS account
  2. Go to name in the top right -> Security Credentials -> get an access key
  3. Generate one

     #+BEGIN_SRC sh
aws configure --profile <name>
aws-profile
     #+END_SRC

  4. Launch an EC2 instance

     #+BEGIN_SRC sh
terraform init # in project root
terraform plan
terraform apply
     #+END_SRC

  5. SSH into ec2

     #+BEGIN_SRC sh
aws configure

# on ec2
ssh-keygen -t rsa -b 4096
cat ~/.ssh/id_rsa.pub # copy it

# on host
gha
paste >> tmp
gh ssh-key add tmp --title <name>
rm tmp

# back to ec2
sudo yum install git -y
git clone git@github.com:lanceberge/<name>.git

cd <proj>
./scripts/setup_ec2
     #+END_SRC

  6. Add CI/CD

     =EC2_HOST= secret is in the ssh command
     Add the full ssh key

  7. Buy the domain namecheap.com

  8. Route 53 -> Create hosted zone with the domain -> create

     Create two A records: /blank/ -> public IP and www -> public IP

     - change the TTL of the nameservers to 60

  10. on namecheap: Account -> Dashboard -> domain list

      Domain -> nameservers -> Custom DNS -> paste in the 4 from Route 53 (remove the periods at the end)

  11. Once the domain propagates

      #+BEGIN_SRC sh
sudo certbot --nginx -d <domain.com> -d www.<domain.com>

rm nginx/nginx.conf
sudo mv /etc/nginx/nginx.conf nginx/nginx.conf
sudo ln -s "/home/ec2-user/$PROJ_NAME/nginx/nginx.conf" /etc/nginx/nginx.conf
      #+END_SRC
